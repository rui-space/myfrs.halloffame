// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef PROTOBUF_Common_2eproto__INCLUDED
#define PROTOBUF_Common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPlayerStatsImpl();
void InitDefaultsPlayerStats();
void InitDefaultsPlayerScoreImpl();
void InitDefaultsPlayerScore();
inline void InitDefaults() {
  InitDefaultsPlayerStats();
  InitDefaultsPlayerScore();
}
}  // namespace protobuf_Common_2eproto
namespace Common {
class PlayerScore;
class PlayerScoreDefaultTypeInternal;
extern PlayerScoreDefaultTypeInternal _PlayerScore_default_instance_;
class PlayerStats;
class PlayerStatsDefaultTypeInternal;
extern PlayerStatsDefaultTypeInternal _PlayerStats_default_instance_;
}  // namespace Common
namespace Common {

// ===================================================================

class PlayerStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Common.PlayerStats) */ {
 public:
  PlayerStats();
  virtual ~PlayerStats();

  PlayerStats(const PlayerStats& from);

  inline PlayerStats& operator=(const PlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerStats(PlayerStats&& from) noexcept
    : PlayerStats() {
    *this = ::std::move(from);
  }

  inline PlayerStats& operator=(PlayerStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerStats* internal_default_instance() {
    return reinterpret_cast<const PlayerStats*>(
               &_PlayerStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlayerStats* other);
  friend void swap(PlayerStats& a, PlayerStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerStats* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerStats& from);
  void MergeFrom(const PlayerStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 score = 1;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // uint32 score_leader = 2;
  void clear_score_leader();
  static const int kScoreLeaderFieldNumber = 2;
  ::google::protobuf::uint32 score_leader() const;
  void set_score_leader(::google::protobuf::uint32 value);

  // uint32 score_follower = 3;
  void clear_score_follower();
  static const int kScoreFollowerFieldNumber = 3;
  ::google::protobuf::uint32 score_follower() const;
  void set_score_follower(::google::protobuf::uint32 value);

  // uint32 rank = 4;
  void clear_rank();
  static const int kRankFieldNumber = 4;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // float accuracy = 5;
  void clear_accuracy();
  static const int kAccuracyFieldNumber = 5;
  float accuracy() const;
  void set_accuracy(float value);

  // uint32 collectible = 6;
  void clear_collectible();
  static const int kCollectibleFieldNumber = 6;
  ::google::protobuf::uint32 collectible() const;
  void set_collectible(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Common.PlayerStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 score_leader_;
  ::google::protobuf::uint32 score_follower_;
  ::google::protobuf::uint32 rank_;
  float accuracy_;
  ::google::protobuf::uint32 collectible_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
  friend void ::protobuf_Common_2eproto::InitDefaultsPlayerStatsImpl();
};
// -------------------------------------------------------------------

class PlayerScore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Common.PlayerScore) */ {
 public:
  PlayerScore();
  virtual ~PlayerScore();

  PlayerScore(const PlayerScore& from);

  inline PlayerScore& operator=(const PlayerScore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerScore(PlayerScore&& from) noexcept
    : PlayerScore() {
    *this = ::std::move(from);
  }

  inline PlayerScore& operator=(PlayerScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerScore* internal_default_instance() {
    return reinterpret_cast<const PlayerScore*>(
               &_PlayerScore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerScore* other);
  friend void swap(PlayerScore& a, PlayerScore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerScore* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerScore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerScore& from);
  void MergeFrom(const PlayerScore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerScore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Common.PlayerStats values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::Common::PlayerStats& values(int index) const;
  ::Common::PlayerStats* mutable_values(int index);
  ::Common::PlayerStats* add_values();
  ::google::protobuf::RepeatedPtrField< ::Common::PlayerStats >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::Common::PlayerStats >&
      values() const;

  // @@protoc_insertion_point(class_scope:Common.PlayerScore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Common::PlayerStats > values_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
  friend void ::protobuf_Common_2eproto::InitDefaultsPlayerScoreImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerStats

// uint32 score = 1;
inline void PlayerStats::clear_score() {
  score_ = 0u;
}
inline ::google::protobuf::uint32 PlayerStats::score() const {
  // @@protoc_insertion_point(field_get:Common.PlayerStats.score)
  return score_;
}
inline void PlayerStats::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Common.PlayerStats.score)
}

// uint32 score_leader = 2;
inline void PlayerStats::clear_score_leader() {
  score_leader_ = 0u;
}
inline ::google::protobuf::uint32 PlayerStats::score_leader() const {
  // @@protoc_insertion_point(field_get:Common.PlayerStats.score_leader)
  return score_leader_;
}
inline void PlayerStats::set_score_leader(::google::protobuf::uint32 value) {
  
  score_leader_ = value;
  // @@protoc_insertion_point(field_set:Common.PlayerStats.score_leader)
}

// uint32 score_follower = 3;
inline void PlayerStats::clear_score_follower() {
  score_follower_ = 0u;
}
inline ::google::protobuf::uint32 PlayerStats::score_follower() const {
  // @@protoc_insertion_point(field_get:Common.PlayerStats.score_follower)
  return score_follower_;
}
inline void PlayerStats::set_score_follower(::google::protobuf::uint32 value) {
  
  score_follower_ = value;
  // @@protoc_insertion_point(field_set:Common.PlayerStats.score_follower)
}

// uint32 rank = 4;
inline void PlayerStats::clear_rank() {
  rank_ = 0u;
}
inline ::google::protobuf::uint32 PlayerStats::rank() const {
  // @@protoc_insertion_point(field_get:Common.PlayerStats.rank)
  return rank_;
}
inline void PlayerStats::set_rank(::google::protobuf::uint32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:Common.PlayerStats.rank)
}

// float accuracy = 5;
inline void PlayerStats::clear_accuracy() {
  accuracy_ = 0;
}
inline float PlayerStats::accuracy() const {
  // @@protoc_insertion_point(field_get:Common.PlayerStats.accuracy)
  return accuracy_;
}
inline void PlayerStats::set_accuracy(float value) {
  
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:Common.PlayerStats.accuracy)
}

// uint32 collectible = 6;
inline void PlayerStats::clear_collectible() {
  collectible_ = 0u;
}
inline ::google::protobuf::uint32 PlayerStats::collectible() const {
  // @@protoc_insertion_point(field_get:Common.PlayerStats.collectible)
  return collectible_;
}
inline void PlayerStats::set_collectible(::google::protobuf::uint32 value) {
  
  collectible_ = value;
  // @@protoc_insertion_point(field_set:Common.PlayerStats.collectible)
}

// -------------------------------------------------------------------

// PlayerScore

// repeated .Common.PlayerStats values = 1;
inline int PlayerScore::values_size() const {
  return values_.size();
}
inline void PlayerScore::clear_values() {
  values_.Clear();
}
inline const ::Common::PlayerStats& PlayerScore::values(int index) const {
  // @@protoc_insertion_point(field_get:Common.PlayerScore.values)
  return values_.Get(index);
}
inline ::Common::PlayerStats* PlayerScore::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Common.PlayerScore.values)
  return values_.Mutable(index);
}
inline ::Common::PlayerStats* PlayerScore::add_values() {
  // @@protoc_insertion_point(field_add:Common.PlayerScore.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Common::PlayerStats >*
PlayerScore::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Common.PlayerScore.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Common::PlayerStats >&
PlayerScore::values() const {
  // @@protoc_insertion_point(field_list:Common.PlayerScore.values)
  return values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Common_2eproto__INCLUDED
